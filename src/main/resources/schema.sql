    CREATE TABLE IF NOT EXISTS users (
        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        birthday DATE NOT NULL,
        login VARCHAR(255) NOT NULL
    );
    ALTER TABLE users ALTER COLUMN id RESTART WITH 1;

    CREATE TABLE IF NOT EXISTS mpa_ratings (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        mpa_name VARCHAR(255) NOT NULL
    );

    CREATE TABLE IF NOT EXISTS genres (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE
    );

    CREATE TABLE IF NOT EXISTS directors (
        director_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(50) NOT NULL UNIQUE
    );

    CREATE TABLE IF NOT EXISTS films (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        release_date DATE,
        duration INT,
        mpa_id INTEGER,
        FOREIGN KEY (mpa_id) REFERENCES mpa_ratings(id) ON DELETE SET NULL
    );

    CREATE TABLE IF NOT EXISTS film_likes (
        film_id BIGINT NOT NULL,
        user_id BIGINT NOT NULL,
        PRIMARY KEY (film_id, user_id),
        FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS film_genres (
        film_id BIGINT NOT NULL,
        genre_id INTEGER NOT NULL,
        PRIMARY KEY (film_id, genre_id),
        FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
        FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS film_directors (
        film_id BIGINT NOT NULL,
        director_id BIGINT NOT NULL,
        PRIMARY KEY (film_id, director_id),
        FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
        FOREIGN KEY (director_id) REFERENCES directors(director_id) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS friendships (
        user_id BIGINT NOT NULL,
        friend_id BIGINT NOT NULL,
        status VARCHAR(20) NOT NULL CHECK (status IN ('PENDING', 'CONFIRMED')),
        PRIMARY KEY (user_id, friend_id),
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE
    );

CREATE TABLE IF NOT EXISTS reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    film_id INTEGER NOT NULL,
    useful INTEGER NOT NULL DEFAULT 0,
    content TEXT NOT NULL,
    is_positive BOOLEAN NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_feedback (
    review_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    is_positive BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id),
    FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes (
    review_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    is_like BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id),
    FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS feed_records (
    event_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_id BIGINT NOT NULL,
    event_type VARCHAR(50) NOT NULL,
    operation VARCHAR(50) NOT NULL,
    entity_id BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);